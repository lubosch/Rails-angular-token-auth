type Advert {
  description: String
  id: ID!
  title: String!
  titleImage: Image!
}

"""
The connection type for Advert.
"""
type AdvertConnection {
  """
  A list of edges.
  """
  edges: [AdvertEdge]

  """
  A list of nodes.
  """
  nodes: [Advert]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AdvertEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Advert
}

type AdvertsQuery {
  list(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AdvertConnection!
}

type Image {
  filename: String
  id: ID!
  url: String
}

type Mutation {
  """
  An example field added by the generator
  """
  testField: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Profile {
  email: String!
  id: ID!
}

type Query {
  adverts: AdvertsQuery!
  users: UsersQuery!
}

type UsersQuery {
  profile: Profile!
}